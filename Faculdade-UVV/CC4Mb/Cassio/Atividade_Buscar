#include <stdio.h>

int Buscar(int v[], int x){
    for (int i = 0; i < 7; i++) {
        if (v[i] == x){
            return i;
        }
         
    }
    return -1;
}

int main()
{
    printf("Hello World\n");
    int v[7] = {23,4,67,-8,54,90,21};
    printf("%d", Buscar(v, 54));

    return 0;
}


Melhorando: 
#include <stdio.h>

int Buscar(int vetor[], int valor, int tamanho)
{
    for (int i = 0; i < tamanho; i++)
    {
        if (valor == vetor[i])
        {
            return i;
        }
    }
    return -1;
}

int Buscar_Ordenada(int vetor[], int valor, int tamanho)
{
    for (int i = 0; i < tamanho; i++)
    {
        if (valor == vetor[i])
        {
            return i;
        } 
        else if (valor < vetor[i])
        {
            break;
        }
         
    }
    return -1;
}

int Buscar_Binaria(int vetor[], int valor, int tamanho)
{
    if (valor < tamanho){
        
    } else if(valor > tamanho){
        
    } else {
        
    }
}

int main()
{
    int valor;
    printf("Digite um valor: ");
    scanf("%d", &valor);
    int vetor1[7] = {23,4,67,-8,54,90,21};
    int vetor2[7] = {-8,4,21,23,54,67,90};
    int vetor3[10] = {-8,-5,1,4,14,21,23,54,67,90};
    printf("%d", Buscar_Ordenada(vetor2, valor, 7));

    return 0;
}


SelectionSort:

#include <stdio.h>

void imprimirVet(int *v, int n){
    printf("\nVetor: |");
    for(int i = 0; i < n; i++){
        printf(" %d |", v[i]);
    }
    
}

void selectionSort(int *v, int n){
    int i, j, menor, aux;
    for(i = 0;i < n;i++){   //esse for percorre o vetor todo
        menor = i;
        for(j=i + 1;j < n; j++){ //percorre do i atÃ© o final
            if(v[j] < v[menor]){ //verifica se achou menor atual
                menor = j; // atualiza o menor
            }
        }
        if(i!=menor){ // se achou um menor que o lugar que estou, troca.
            aux = v[i];
            v[i] = v[menor];
            v[menor] = aux;
        }
    }
}

int main()
    {
        int valor;
        int vetor[10] = {6,75,1,14,24,18,3,7,50,10};
        imprimirVet(vetor, 10);
        selectionSort(vetor,10);
        imprimirVet(vetor, 10);
        return 0;
    }


BubbleSort:
void bubbleSort(int *v, int n){
    int i, j, troca, aux;
    do {
        troca = 0;
        for(i = 0; i < n - 1; i++){
        j = i + 1;
        if(v[i] > v[j]){
            aux = v[i];
            v[i] = v[j];
            v[j] = aux;
            troca = 1;
        }
    }
 }  while(troca = 0);
   
}

int main()
    {
        int valor;
        int vetor[10] = {6,75,1,14,24,18,3,7,50,10};
        imprimirVet(vetor, 10);
        bubbleSort(vetor, 10);
        imprimirVet(vetor, 10);
        return 0;
    }


InsertionSort:

#include <stdio.h>

void imprimirVet(int *v, int n){
    printf("\nVetor: |");
    for(int i = 0; i < n; i++){
        printf(" %d |", v[i]);
    }
}


void InsertonSort(int *v, int n){
    int i, j, aux;
    for(i = 1; i < n; i++){
        aux = v[i];
        for (j = i; j > 0 && aux < v[j - 1]; j--){
            v[j] = v[j - 1];
        }
        v[j] = aux;
    }
}


int main()
    {
        int vetor[10] = {6,75,1,14,24,18,3,7,50,10};
        imprimirVet(vetor, 10);
        InsertonSort(vetor, 10);
        imprimirVet(vetor, 10);
        return 0;
}
